# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12geKDhkmI7-HiSrBwHAF7QIGWQPKPd3x

# Install streamlit and ngrok
"""

!pip install streamlit
!pip install pyngrok
!pip install transformers
!pip install sentencepiece
!pip install nltk

!pip install langdetect  # Install langdetect for language detection

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
from transformers import M2M100ForConditionalGeneration, M2M100Tokenizer
from langdetect import detect, DetectorFactory
import time

# Fix langdetect randomness
DetectorFactory.seed = 0

# Load Model & Tokenizer
model_name = "facebook/m2m100_418M"
tokenizer = M2M100Tokenizer.from_pretrained(model_name)
model = M2M100ForConditionalGeneration.from_pretrained(model_name)

# Supported Languages
languages = {
    'en': 'English', 'mr': 'Marathi', 'hi': 'Hindi', 'fr': 'French',
    'de': 'German', 'es': 'Spanish', 'it': 'Italian', 'ja': 'Japanese',
    'ko': 'Korean', 'zh': 'Chinese'
}
reverse_languages = {v: k for k, v in languages.items()}

# Streamlit UI
st.markdown(
    """
    <h1 style="text-align: center; color: #4682B4">üåç Language Translator</h1>
    """,
    unsafe_allow_html=True
)

# Input Text Area
text = st.text_area("‚úçÔ∏è Enter Text:", height=150, placeholder="Type here...")

# Auto-Detect Language
detected_lang_code = None
detected_lang_display = "Detecting..."

if text.strip():
    try:
        detected_lang_code = detect(text)
        detected_lang_display = f"Detected: {languages.get(detected_lang_code, 'Unknown')}"
    except:
        detected_lang_display = "Detection Failed"

# Language Selection with Auto-Detect
col1, col2 = st.columns(2)

with col1:
    source_lang_display = st.selectbox(
        "üåç Source Language",
        [detected_lang_display] + list(languages.values()),
        index=0
    )
    source_lang_code = reverse_languages.get(source_lang_display, detected_lang_code)

with col2:
    target_lang_display = st.selectbox("üåê Target Language", list(languages.values()), index=0)
    target_lang_code = reverse_languages.get(target_lang_display, 'en')


# Translation Function with Enhanced Prompt
def translate(text, source_lang, target_lang):
    prompt = (
        f"You are a highly skilled translator proficient in multiple languages. Your task is to translate the following text from {source_lang} to {target_lang} accurately and fluently, preserving its meaning and context.\n\n"
        f"Source Text: \"{text}\"\n\nTranslated Text: "
    )
    tokenizer.src_lang = source_lang
    model_inputs = tokenizer(prompt, return_tensors="pt")
    translated_tokens = model.generate(
        **model_inputs,
        forced_bos_token_id=tokenizer.lang_code_to_id[target_lang]
    )
    translated_text = tokenizer.decode(translated_tokens[0], skip_special_tokens=True)
    return translated_text


# Enhance Button Styling with CSS
st.markdown(
    """
    <style>
    .interactive-button {
        background-color: #1C1A1C;
        color: white;
        font-size: 18px;
        padding: 15px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s;
        width: 100%;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
    }
    .interactive-button:hover {
        background-color: #28a745;
        box-shadow: 0px 0px 25px rgba(40, 167, 69, 0.5);
    }
    .interactive-button:active {
        background-color: #218838;
        transform: translateY(2px);
    }
    .loading-spinner {
        margin-top: 10px;
        display: flex;
        justify-content: center;
    }
    .button-container {
        display: flex;
        justify-content: space-between;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Translate Button and Clear Button in the same row
translated_text = ""
loading = False
col1, col2 = st.columns([1, 1])  # Create two columns for buttons

with col1:
    if st.button("üöÄ Translate", key="translate_btn", help="Click to translate text") and text.strip():
        loading = True
        translated_text = ""
        time.sleep(1)  # Simulate loading time
        translated_text = translate(text, source_lang_code, target_lang_code)
        loading = False

with col2:
    if st.button("üßπ Clear All", key="clear_btn", help="Click to clear text and reset"):
        st.experimental_rerun()

# Display Loading Spinner
if loading:
    st.markdown('<div class="loading-spinner">üîÑ Translating...</div>', unsafe_allow_html=True)

# Display Translated Text in Target Textbox
st.text_area("üìù Translated Text:", value=translated_text if translated_text else "Translation will appear here...", height=150)

!ngrok config add-authtoken 2sZufWzpSOi4aSvNMxwIhdoMn9a_7CVFq11hcjV8nJ95B29Cp

import subprocess

# Install required packages
packages = ["streamlit", "pyngrok", "transformers", "sentencepiece", "nltk", "langdetect"]
for package in packages:
    subprocess.run(["pip", "install", package], check=True)

from pyngrok import ngrok
# Start the ngrok tunnel for Streamlit (port 8501)
public_url = ngrok.connect(8501)

print(f"Streamlit app is running at: {public_url}")


# Run the Streamlit app
subprocess.Popen(["streamlit", "run", "app.py"])


